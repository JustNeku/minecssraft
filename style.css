@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

:root {
    --block-size: 64px;
    --blocks-per-row: 9;

    --max-rotation: 1000turn;
    --max-height: 1000rem;
    --animation-duration: 10000s;

    --icon-arrow-sm-up: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="black"><path stroke-linecap="round" stroke-linejoin="round" d="M7 11l5-5m0 0l5 5m-5-5v12"></path></svg>');
    --icon-arrow-sm-down: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="black"><path stroke-linecap="round" stroke-linejoin="round" d="M17 13l-5 5m0 0l-5-5m5 5V6"></path></svg>');
    --icon-caret-down: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M310.6 246.6l-127.1 128C176.4 380.9 168.2 384 160 384s-16.38-3.125-22.63-9.375l-127.1-128C.2244 237.5-2.516 223.7 2.438 211.8S19.07 192 32 192h255.1c12.94 0 24.62 7.781 29.58 19.75S319.8 237.5 310.6 246.6z"/></svg>');
    --icon-caret-left: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path d="M137.4 406.6l-128-127.1C3.125 272.4 0 264.2 0 255.1s3.125-16.38 9.375-22.63l128-127.1c9.156-9.156 22.91-11.9 34.88-6.943S192 115.1 192 128v255.1c0 12.94-7.781 24.62-19.75 29.58S146.5 415.8 137.4 406.6z"/></svg>');
    --icon-caret-right: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path d="M118.6 105.4l128 127.1C252.9 239.6 256 247.8 256 255.1s-3.125 16.38-9.375 22.63l-128 127.1c-9.156 9.156-22.91 11.9-34.88 6.943S64 396.9 64 383.1V128c0-12.94 7.781-24.62 19.75-29.58S109.5 96.23 118.6 105.4z"/></svg>');
    --icon-caret-up: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M9.39 265.4l127.1-128C143.6 131.1 151.8 128 160 128s16.38 3.125 22.63 9.375l127.1 128c9.156 9.156 11.9 22.91 6.943 34.88S300.9 320 287.1 320H32.01c-12.94 0-24.62-7.781-29.58-19.75S.2333 274.5 9.39 265.4z"/></svg>');
    --icon-rotate-x-forwards: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="m12 10h2.91c-.34-3.45-1.51-6-2.91-6-1.58 0-2.88 3.27-3 7.42l-2 1.15v-.57c0-5.5 2.24-10 5-10 2.42 0 4.44 3.44 4.9 8h3.1l-4 4zm0 12c-1.88 0-3.53-2.08-4.38-5.16l1.75-1.01c.5 2.48 1.49 4.17 2.63 4.17 1.27 0 2.36-2.11 2.79-5.08l1.21 1.2.7-.7c-.7 3.84-2.54 6.58-4.7 6.58m-9.89-3.13-1-1.74-.05-.07 10.06-5.81 1.6 1.59-10.57 6.1zm19.78-13.74 1 1.74-3.69 2.13h-1.43l-.27-1.34z"/></svg>');
    --icon-rotate-x-backwards: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="m12 14 4-4 4 4h-3.1c-.46 4.56-2.48 8-4.9 8-1.88 0-3.53-2.08-4.38-5.16l1.75-1.01c.5 2.48 1.49 4.17 2.63 4.17 1.4 0 2.57-2.55 2.91-6zm-10.89 3.13 12.78-7.38.07.79-3.46 3.46h.04l-8.43 4.87zm20.78-12 1 1.74-5.01 2.89c-.09-.73-.21-1.43-.38-2.1zm-9.89-3.13c2.3 0 4.23 3.1 4.82 7.32l-.82-.82-1.13 1.13c-.37-3.26-1.52-5.63-2.87-5.63-1.58 0-2.88 3.27-3 7.42l-2 1.15v-.57c0-5.5 2.24-10 5-10z"/></svg>');
    --icon-rotate-left: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M480 256c0 123.4-100.5 223.9-223.9 223.9c-48.84 0-95.17-15.58-134.2-44.86c-14.12-10.59-16.97-30.66-6.375-44.81c10.59-14.12 30.62-16.94 44.81-6.375c27.84 20.91 61 31.94 95.88 31.94C344.3 415.8 416 344.1 416 256s-71.69-159.8-159.8-159.8c-37.46 0-73.09 13.49-101.3 36.64l45.12 45.14c17.01 17.02 4.955 46.1-19.1 46.1H35.17C24.58 224.1 16 215.5 16 204.9V59.04c0-24.04 29.07-36.08 46.07-19.07l47.6 47.63C149.9 52.71 201.5 32.11 256.1 32.11C379.5 32.11 480 132.6 480 256z"/></svg>');
	--icon-rotate-right: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M468.9 32.11c13.87 0 27.18 10.77 27.18 27.04v145.9c0 10.59-8.584 19.17-19.17 19.17h-145.7c-16.28 0-27.06-13.32-27.06-27.2c0-6.634 2.461-13.4 7.96-18.9l45.12-45.14c-28.22-23.14-63.85-36.64-101.3-36.64c-88.09 0-159.8 71.69-159.8 159.8S167.8 415.9 255.9 415.9c73.14 0 89.44-38.31 115.1-38.31c18.48 0 31.97 15.04 31.97 31.96c0 35.04-81.59 70.41-147 70.41c-123.4 0-223.9-100.5-223.9-223.9S132.6 32.44 256 32.44c54.6 0 106.2 20.39 146.4 55.26l47.6-47.63C455.5 34.57 462.3 32.11 468.9 32.11z"/></svg>');
    --icon-arrow-left: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="black"><path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>');
    --icon-github: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"/></svg>');
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:where([class^="icon:"], [class*=" icon:"]) {
    &::before {
        content: "";
    }
    
    &::before, &::after {
        display: var(--icon-display, block);
        inline-size: var(--icon-size, 1em);
        aspect-ratio: 1;
        background-color: var(--icon-color, currentColor);
        mask: var(--icon) center / contain no-repeat;
    }
}

body {
    background: linear-gradient(to bottom, #94c5f8 1%,#a6e6ff 70%,#b1b5ea 100%);
}

.icon\:caret-down { --icon: var(--icon-caret-down); }
.icon\:caret-left { --icon: var(--icon-caret-left); }
.icon\:caret-right { --icon: var(--icon-caret-right); }
.icon\:caret-up { --icon: var(--icon-caret-up); }

.icon\:arrow-sm-up { --icon: var(--icon-arrow-sm-up); }
.icon\:arrow-sm-down { --icon: var(--icon-arrow-sm-down); }

.icon\:rotate-x-forwards { --icon: var(--icon-rotate-x-forwards); }
.icon\:rotate-x-backwards { --icon: var(--icon-rotate-x-backwards); }
.icon\:rotate-left { --icon: var(--icon-rotate-left); }
.icon\:rotate-right { --icon: var(--icon-rotate-right); }

.icon\:arrow-left { --icon: var(--icon-arrow-left); }
.icon\:github { --icon: var(--icon-github); }

.poppins-regular {
  font-family: "Poppins", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.poppins-semibold {
  font-family: "Poppins", sans-serif;
  font-weight: 600;
  font-style: normal;
}


main {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    height: 100dvh;
    overflow: hidden;

    &:has(input[value="cobble"]:checked) {
        .block.cobble {
            display: block;
        }
    }

    &:has(input[value="grass"]:checked) {
        .block.grass {
            display: block;
        }
    }

    &:has(input[value="glass"]:checked) {
        .block.glass {
            display: block;
        }
    }

    &:has(input[value="sand"]:checked) {
        .block.sand {
            display: block;
        }
    }

    &:has(input[value="tree"]:checked) {
        .block.tree {
            display: block;
        }
    }

    &:has(input[value="wood"]:checked) {
        .block.wood {
            display: block;
        }
    }

    &:has(input[value="dirt"]:checked) {
        .block.dirt {
            display: block;
        }
    }

    &:has(input[value="gravel"]:checked) {
        .block.gravel {
            display: block;
        }
    }

    &:has(input[value="leaves"]:checked) {
        .block.leaves {
            display: block;
        }
    }

    &:has(input[value="air"]:checked) {
        .block.air {
            display: block;

            &:hover>label {
                box-shadow: inset 0 0 2px 0.25rem #ffffffaa, inset 0 0 0 1px #000000aa;
            }
        }
    }
}

.world {
    position: relative;
    transform-origin: center;

    .block-container {
        display: none;
        width: var(--block-size);
        aspect-ratio: 1;
        position: absolute;
        transform:
            translateX(calc(var(--column) * var(--block-size) - var(--block-size) * var(--blocks-per-row) / 2)) translateY(calc((var(--row)) * var(--block-size) - var(--block-size) * var(--blocks-per-row) / 2)) translateZ(calc((var(--layer)) * var(--block-size)));

        &:has(input:not([data-block="air"]):checked) {
            display: block;
        }

        input[type="radio"] {
            display: none;
        }

        .block {
            display: none;
            width: inherit;
            aspect-ratio: inherit;
            position: absolute;

            &>label {
                position: absolute;
                height: 100%;
                aspect-ratio: inherit;
                background-size: cover;
                image-rendering: pixelated;

                &:hover {
                    box-shadow: inset 0 0 2px 0.25rem #ffffffaa, inset 0 0 0 1px #000000aa;
                }

                &:not([for]):hover {
                    box-shadow: inset 0 0 1rem 0.25rem #ff0044aa, inset 0 0 0 1px #000000aa;
                }
            }

            .left,
            .right,
            .front,
            .back {
                background-image: var(--texture-side);
            }

            .top {
                background-image: var(--texture-top);
            }

            .bottom {
                background-image: var(--texture-bottom);
            }

            .top {
                transform: translateZ(var(--block-size));
                filter: brightness(1.15);
            }

            .bottom {
                filter: brightness(0.5);
            }

            .back {
                transform-origin: bottom;
                transform: rotateX(270deg) translateZ(calc(-1 * var(--block-size)));
                filter: brightness(0.65);
            }

            .left {
                filter: brightness(0.85);
                transform-origin: bottom left;
                transform: rotateZ(90deg) rotateX(270deg) translateX(calc(-1 * var(--block-size)));
            }

            .right {
                filter: brightness(0.75);
                transform-origin: bottom right;
                transform: rotateZ(90deg) rotateX(270deg);
            }

            .front {
                transform-origin: bottom;
                transform: rotateX(270deg);
                filter: brightness(1);
            }
        }

        &:has(input[data-block="cobble"]:checked) {
            --texture-top: url('assets/cobble.png');
            --texture-side: url('assets/cobble.png');
            --texture-bottom: url('assets/cobble.png');
        }

        &:has(input[data-block="dirt"]:checked) {
            --texture-top: url('assets/dirt.png');
            --texture-side: url('assets/dirt.png');
            --texture-bottom: url('assets/dirt.png');
        }

        &:has(input[data-block="grass"]:checked) {
            --texture-top: url('assets/grass--top.png');
            --texture-side: url('assets/grass--side.png');
            --texture-bottom: url('assets/dirt.png');
        }

        &:has(input[data-block="gravel"]:checked) {
            --texture-top: url('assets/gravel.png');
            --texture-side: url('assets/gravel.png');
            --texture-bottom: url('assets/gravel.png');
        }

        &:has(input[data-block="leaves"]:checked) {
            --texture-top: url('assets/leaves.png');
            --texture-side: url('assets/leaves.png');
            --texture-bottom: url('assets/leaves.png');
        }

        &:has(input[data-block="tree"]:checked) {
            --texture-top: url('assets/tree--top.png');
            --texture-side: url('assets/tree.png');
            --texture-bottom: url('assets/tree--top.png');
        }

        &:has(input[data-block="glass"]:checked) {
            --texture-top: url('assets/glass.png');
            --texture-side: url('assets/glass.png');
            --texture-bottom: url('assets/glass.png');
        }

        &:has(input[data-block="sand"]:checked) {
            --texture-top: url('assets/sand.png');
            --texture-side: url('assets/sand.png');
            --texture-bottom: url('assets/sand.png');
        }

        &:has(input[data-block="wood"]:checked) {
            --texture-top: url('assets/wood.png');
            --texture-side: url('assets/wood.png');
            --texture-bottom: url('assets/wood.png');
        }
    }
}

.hud {
    position: fixed;
    bottom: 1rem;
    margin-inline: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    transform: scale(0.7) translateY(1rem);
    transform-origin: bottom;

    transition: transform 0.2s ease-in-out;

    padding: 1rem;
    border-radius: 0.5rem;
    background: linear-gradient(12deg, #000000aa, #666666aa);
    box-shadow: 0 0 0.5rem rgba(0,0,0,0.5);
    backdrop-filter: blur(4px);

    &:hover {
        transform: scale(1) translateY(0);
    }

    .blocks {
        background-color: #526897aa;
        translate: 0 0 5000000rem;
        border: 2px solid #15203a;
        display: flex;
        flex-direction: row;
        backdrop-filter: blur(8px);

        label {
            padding: 0.5rem;
            display: grid;
            box-shadow: inset 0 0 0 2px #354464, inset 4px 4px 0 0 #27324a;

            img {
                width: 4rem;
                object-fit: contain;
                filter: brightness(0.6) saturate(0.8);
            }

            input {
                display: none;
            }

            &:not(:has(input:checked)):hover {
                box-shadow: inset 0 0 0 4px #ffffff77, inset 0 0 0 2px #354464, inset 4px 4px 0 0 #27324a;
            }

            &:has(input:checked) {
                z-index: 1;
                box-shadow: inset 0 0 0 4px #ffffffaa, 0 0 0 2px #ffffff55, inset 0 0 0 2px #354464, inset 4px 4px 0 0 #27324a;
                img {
                    filter: brightness(1) saturate(1);
                }
            }
        }
    }

    .tools {
        display: flex;
        flex-direction: row;
        gap: 1.5rem;
        align-items: flex-end;
        justify-content: center;

        button {
            aspect-ratio: 1;
            height: 3rem;
            background-color: rgba(128, 128, 128, .75);
            color: #444444;
            border: 0;
            box-shadow: inset 2px 2px 0 2px rgba(255,255,255,0.5), inset -2px -2px 0 2px rgba(0,0,0,0.5);
            outline: transparent;
            backdrop-filter: blur(8px);
            font-size: 2rem;
            display: grid;
            place-items: center;

            &:hover {
                background-color: rgba(164, 164, 164, .75);
            }

            &:active {
                background-color: rgba(96, 96, 96, .85);
                box-shadow: inset 2px 2px 0 2px rgba(0,0,0,0.2), inset -2px -2px 0 2px rgba(255,255,255,0.2);
                color: #cccccc;
            }
        }

        .move-wasd {
            display: grid;
            grid-template-columns: repeat(3, auto);
            grid-template-rows: auto auto;
            gap: 0.25rem;

            button:first-child {
                grid-column: 2;
            }
            button:not(:first-child) {
                grid-row: 2;
            }
        }

        .elevator {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .rotates {
            display: grid;
            grid-template-columns: auto auto;
            gap: 0.25rem;
        }
    }

    .keep-big {
        position: absolute;
        left: 1rem;
        top: 1rem;
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        align-items: center;

        div {
            position: relative;
            width: 1.5rem;
            aspect-ratio: 1;
            border: 1px solid rgba(0,0,0,0.5);
            background: rgba(255, 255, 255, .5);
            border-radius: 4px;
            display: grid;
            place-items: center;

            &::before {
                content: "";
                width: 1rem;
                border-radius: 100%;
                aspect-ratio: 1;
                background-color: transparent;
                transition: background-color 0.05s ease-in-out;
            }
        }

        input {
            display: none;
        }

        &:has(input:checked) {
            div::before {
                background-color: #0d4a8d;
            }
            div {
                border-color: #0d4a8d;
            }

        }
    
    }

    &:has(.keep-big input:checked) {
        transform: none;
    }
}


.camera {

    &, * {
        transform-style: preserve-3d;
    }
    transform: perspective(1600px) rotateX(55deg) rotateZ(5deg);
}


.camera-rotate {
    animation: rotate-clockwise var(--animation-duration) paused linear;
}

main:has(button[data-rotate="clockwise"]:active) {
    .camera-rotate {
        animation-play-state: running;
    }
}

@keyframes rotate-clockwise {
    from {
        transform: rotateZ(0);
    }

    to {
        transform: rotateZ(var(--max-rotation));
    }
}

.camera-rotate-counter {
    animation: rotate-counter-clockwise var(--animation-duration) paused linear;
}

main:has(button[data-rotate="counter-clockwise"]:active) {
    .camera-rotate-counter {
        animation-play-state: running;
    }
}

@keyframes rotate-counter-clockwise {
    from {
        transform: rotateZ(0);
    }

    to {
        transform: rotateZ(calc(-1 * var(--max-rotation)));
    }
}

.camera-up {
    animation: move-up 100s paused linear;
}

main:has(button[data-move="up"]:active) {
    .camera-up {
        animation-play-state: running;
    }
}

@keyframes move-up {
    from {
        translate: 0 0 0;
    }

    to {
        translate: 0 0 calc(-1 * var(--max-height));
    }
}

.camera-down {
    animation: move-down 100s paused linear;
}

main:has(button[data-move="down"]:active) {
    .camera-down {
        animation-play-state: running;
    }
}

@keyframes move-down {
    from {
        translate: 0 0 0;
    }
    
    to {
        translate: 0 0 var(--max-height);
    }
}

.camera-left {
    animation: move-left 100s paused linear;
}

main:has(button[data-move="left"]:active) {
    .camera-left {
        animation-play-state: running;
    }
}

@keyframes move-left {
    from {
        translate: 0 0 0;
    }

    to {
        translate: var(--max-height) 0 0;
    }
}

.camera-right {
    animation: move-right 100s paused linear;
}

main:has(button[data-move="right"]:active) {
    .camera-right {
        animation-play-state: running;
    }
}

@keyframes move-right {
    from {
        translate: 0 0 0;
    }

    to {
        translate: calc(-1 * var(--max-height)) 0 0;
    }
}

.camera-forward {
    animation: move-forward 100s paused linear;
}

main:has(button[data-move="forward"]:active) {
    .camera-forward {
        animation-play-state: running;
    }
}

@keyframes move-forward {
    from {
        translate: 0 0 0;
    }

    to {
        translate: 0 var(--max-height) 0;
    }
}

.camera-back {
    animation: move-back 100s paused linear;
}

main:has(button[data-move="back"]:active) {
    .camera-back {
        animation-play-state: running;
    }
}

@keyframes move-back {
    from {
        translate: 0 0 0;
    }

    to {
        translate: 0 calc(-1 * var(--max-height)) 0;
    }
}

.camera-rotate-down {
    animation: rotate-down var(--animation-duration) paused linear;
}

main:has(button[data-rotate="rotate-down"]:active) {
    .camera-rotate-down {
        animation-play-state: running;
    }
}

@keyframes rotate-down {
    from {
        transform: rotateX(0);
    }

    to {
        transform: rotateX(var(--max-rotation));
    }
}

.camera-rotate-up {
    animation: rotate-up var(--animation-duration) paused linear;
}

main:has(button[data-rotate="rotate-up"]:active) {
    .camera-rotate-up {
        animation-play-state: running;
    }
}

@keyframes rotate-up {
    from {
        transform: rotateX(0);
    }

    to {
        transform: rotateX(calc(-1 * var(--max-rotation)));
    }
}

.slide-in {
    position: fixed;
    right: 0;
    top: 2rem;

    border-radius: 0.5rem;
    backdrop-filter: blur(4px);
    
    color: #dddddd;
    
    transform: translateX(calc(100% - 3rem));
    transition: transform 0.2s ease-in-out;
    
    display: grid;
    grid-template-columns: 3rem auto;
    
    label {
        height: fit-content;
        padding: 1rem;
        font-size: 1.5rem;
        border-top-left-radius: 0.5rem;
        border-bottom-left-radius: 0.5rem;
        background-color: #000000aa;
        display: grid;
        place-items: center;

        input {
            display: none;
        }

        span {
            transition: transform .2s ease-in-out;
        }
    }

    &:has(input:checked) {
        transform: translateX(0);

        label span {
            display: block;
            transform: rotateZ(180deg);
        }
    }
    
    article {
        padding: 1rem;
        background-color: #000000aa;
        border-bottom-left-radius: 0.5rem;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;

        h1 {
            font-size: 1.6rem;
            position: relative;

            span {
                position: absolute;
                bottom: 1.5rem;
                font-size: 0.7rem;
            }
        }
        h2 {
            font-size: 1.2rem;
        }

        p {
            margin-left: .5rem;
        }

        a {
            color: #98c8ff;
            text-decoration: none;

            &:hover {
                color: rgb(77, 160, 255);
            }

            &.inline {
                display: flex;
                gap: 0.5rem;
                align-items: center;
            }
        }
    }
}